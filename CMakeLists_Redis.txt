cmake_minimum_required(VERSION 3.21)
project(QtTradeFrontend_Redis VERSION 1.0.0 LANGUAGES CXX)

# QML Frontend with Direct Redis Integration using hiredis

# QML Language Server Configuration
set(QT_QML_GENERATE_QMLLS_INI ON)

# Qt Meta-Object / Resources automatic generation
set(CMAKE_AUTOMOC ON)
set(CMAKE_AUTORCC ON)
set(CMAKE_AUTOUIC ON)

set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

# Qt Dependencies
find_package(QT NAMES Qt6 Qt5 REQUIRED COMPONENTS Core Quick)
find_package(Qt${QT_VERSION_MAJOR} REQUIRED COMPONENTS Core Quick)

# hiredis Integration (REQUIRED for this version)
set(HIREDIS_SRC_DIR ${CMAKE_SOURCE_DIR}/hiredis-1.3.0)
if(EXISTS ${HIREDIS_SRC_DIR}/CMakeLists.txt)
    message(STATUS "✅ Using bundled hiredis at ${HIREDIS_SRC_DIR}")
    # Add hiredis as subdirectory
    add_subdirectory(${HIREDIS_SRC_DIR} EXCLUDE_FROM_ALL)
    # Mark for code that we use the vendored structure
    add_compile_definitions(HIREDIS_VENDORED HIREDIS_AVAILABLE)
    set(HIREDIS_AVAILABLE TRUE)
else()
    # Try to find system hiredis
    find_library(HIREDIS_LIB hiredis)
    find_path(HIREDIS_INCLUDE_DIR hiredis/hiredis.h)
    
    if(HIREDIS_LIB AND HIREDIS_INCLUDE_DIR)
        message(STATUS "✅ Found system hiredis: ${HIREDIS_LIB}")
        add_compile_definitions(HIREDIS_AVAILABLE)
        set(HIREDIS_AVAILABLE TRUE)
    else()
        message(FATAL_ERROR "❌ hiredis not found! Please install hiredis or place hiredis-1.3.0/ in project root")
    endif()
endif()

# C++ Sources (minimal + Redis plugin)
set(SOURCES
    src/main_qml.cpp
    src/qml_redis_plugin.cpp
)

# Create executable
qt_add_executable(QtTradeFrontend_Redis
    ${SOURCES}
)

# Version header generation
configure_file(${CMAKE_CURRENT_SOURCE_DIR}/version.in.h ${CMAKE_CURRENT_BINARY_DIR}/generated/version.h @ONLY)
target_include_directories(QtTradeFrontend_Redis PRIVATE ${CMAKE_CURRENT_BINARY_DIR}/generated)

# QML Module definition
qt_add_qml_module(QtTradeFrontend_Redis
    URI Frontend
    VERSION 1.0
    QML_FILES
        # Main application
        qml/MainRedis.qml
        qml/Theme.qml
        
        # Services
        qml/services/RedisDataService.qml
        
        # Modern Components
        qml/components/StatusIndicator.qml
        qml/components/ModernSideNav.qml
        qml/components/ModernMarketView.qml
        qml/components/ModernChartView.qml
        qml/components/ModernPortfolioView.qml
        qml/components/ModernOrdersView.qml
        qml/components/ModernSettingsView.qml
        qml/components/NotificationDrawer.qml
        qml/components/NotificationItem.qml
        
        # Market Components
        qml/components/MarketStatCard.qml
        qml/components/MarketRowDelegate.qml
        
        # Portfolio Components
        qml/components/PortfolioSummaryCard.qml
        qml/components/PortfolioRowDelegate.qml
        
        # Order Components
        qml/components/OrderStatCard.qml
        qml/components/OrderRowDelegate.qml
        
        # Legacy components (for compatibility)
        qml/components/HeaderBar.qml
        qml/components/SideNav.qml
        qml/components/MarketList.qml
        qml/components/StatusBadge.qml
        qml/components/CandleChart.qml
        qml/components/AnimatedCard.qml
        qml/components/CandleChartEnhanced.qml
        qml/components/MarketListEnhanced.qml
        qml/components/MyLabel.qml
)

# Link Qt libraries
target_link_libraries(QtTradeFrontend_Redis PRIVATE 
    Qt::Core 
    Qt::Quick
)

# Link hiredis
if(HIREDIS_AVAILABLE)
    if(TARGET hiredis)
        target_link_libraries(QtTradeFrontend_Redis PRIVATE hiredis)
        message(STATUS "✅ Linked with bundled hiredis")
    elseif(TARGET libhiredis)
        target_link_libraries(QtTradeFrontend_Redis PRIVATE libhiredis)
        message(STATUS "✅ Linked with bundled libhiredis")
    elseif(HIREDIS_LIB)
        target_link_libraries(QtTradeFrontend_Redis PRIVATE ${HIREDIS_LIB})
        target_include_directories(QtTradeFrontend_Redis PRIVATE ${HIREDIS_INCLUDE_DIR})
        message(STATUS "✅ Linked with system hiredis")
    else()
        message(FATAL_ERROR "❌ hiredis target not found after configuration")
    endif()
endif()

# Compiler definitions
target_compile_definitions(QtTradeFrontend_Redis PRIVATE 
    QML_REDIS_FRONTEND
    QT_QML_DEBUG
)

# Install configuration
install(TARGETS QtTradeFrontend_Redis
    BUNDLE DESTINATION .
    RUNTIME DESTINATION bin
)

# Development helper: QML debugging
if(CMAKE_BUILD_TYPE STREQUAL "Debug")
    target_compile_definitions(QtTradeFrontend_Redis PRIVATE QT_QML_DEBUG)
endif()

# Platform-specific configurations
if(WIN32)
    message(STATUS "Windows: Use windeployqt QtTradeFrontend_Redis.exe for deployment")
elseif(APPLE)
    set_target_properties(QtTradeFrontend_Redis PROPERTIES
        MACOSX_BUNDLE TRUE
        MACOSX_BUNDLE_INFO_PLIST ${CMAKE_SOURCE_DIR}/Info.plist.in
    )
elseif(UNIX)
    configure_file(${CMAKE_SOURCE_DIR}/QtTradeFrontend.desktop.in 
                   ${CMAKE_BINARY_DIR}/QtTradeFrontend_Redis.desktop @ONLY)
endif()

# Custom target for QML linting
find_program(QMLLINT_EXECUTABLE qmllint)
if(QMLLINT_EXECUTABLE)
    add_custom_target(qml_lint
        COMMAND ${QMLLINT_EXECUTABLE} ${CMAKE_SOURCE_DIR}/qml
        COMMENT "Running QML linter"
        VERBATIM
    )
endif()

# Print configuration summary
message(STATUS "=== QtTrade Frontend Redis Configuration ===")
message(STATUS "Qt Version: ${Qt${QT_VERSION_MAJOR}_VERSION}")
message(STATUS "Build Type: ${CMAKE_BUILD_TYPE}")
message(STATUS "hiredis: ${HIREDIS_AVAILABLE}")
if(HIREDIS_AVAILABLE)
    message(STATUS "hiredis Source: ${HIREDIS_SRC_DIR}")
endif()
message(STATUS "QML Language Server: ${QT_QML_GENERATE_QMLLS_INI}")
message(STATUS "==============================================")